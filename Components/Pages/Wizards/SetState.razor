@page "/serverstatus"
@using serverManagement2.StateStore

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject SessionStorage sessionStorage

<h3>Set State</h3>
<br />
<br />
@if (!string.IsNullOrWhiteSpace(errorMessage))
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}

@if (server is not null)
{
    <FieldComponent Label="Server Status">
        <Control>
            <input type="checkbox" @bind-value="server.IsOnline" class="form-check-input"></input>
        </Control>
    </FieldComponent>
}

<br />
<button type="button" class="btn btn-primary" @onclick="Save">Save</button>

@code {

    private Server? server;

    private string? errorMessage;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.server = await this.sessionStorage.GetServerAsync();
            StateHasChanged();
        }
    }

    private async Task Save()
    {
        if (server is not null)
        {
            await sessionStorage.SetServerAsync(null);
            ServersRepository.AddServer(server);
            NavigationManager.NavigateTo($"/Servers/back_from/{server.City}");
        }
        
    }

}
