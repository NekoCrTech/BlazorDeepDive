@page "/Servers/{id:int}"

@inject NavigationManager NavigationManager

<h3>Edit Server</h3>
<br />
<br />

@if (server != null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        
        <InputNumber @bind-Value="server.Id" hidden></InputNumber>

        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="@(() => server.Name)"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="@(() => server.City)"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="Online Status">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check-input"></InputCheckbox>
            </Control>
        </FieldComponent>

        <br />

        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <br />

        <button class="btn btn-primary" type="submit">Update</button>
        &nbsp;
        <a href="/Servers" class="btn btn-primary">Close</a>

    </EditForm>
}




@code
{
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        server ??= ServersRepository.GetServerById(this.Id);
    }

    private void Submit()
    {
        if (server != null)
        {
            ServersRepository.UpdateServer(server.Id, server);
        }

        NavigationManager.NavigateTo($"/Servers/back_from/{this.server?.City}");
    }
}
