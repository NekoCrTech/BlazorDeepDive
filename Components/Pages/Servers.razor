@page "/Servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>
<br>
<br>

@*------------ City Cards -------------*@

<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase)?"border-primary":"")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="...">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick=@(() => { selectCity(city); })>@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<br />

@*------------ Search Bar -------------*@

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="Search Servers" @onchange="HandleServerFilterChange" />
    <button class="btn btn-outline-secondary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>


@*------------ Server List -------------*@

<ul>
    @foreach (var server in servers)
    {
        <li>
            @server.Name in @server.City is
            <span style="color:@((server.IsOnline ? "green" : "red"))">
                @(server.IsOnline ? "online" : "offline")
            </span>
            &nbsp;
            <a href="/servers/@server.Id" class="btn btn-link">Edit</a>
            &nbsp;
            <EditForm 
                Model="server" 
                FormName="@($"form-server-{server.Id}")"
                OnValidSubmit="@(() => {DeleteServer(server.Id);})">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>

            
        </li>
    }
</ul>


<p>
    <a href="/Servers/Add" class="btn btn-primary">Add Server</a>
</p>


@code {
    private List<Server> servers = ServersRepository.GetServersByCity("Toronto");

    private List<String> cities = CitiesRepository.GetCities();

    private string selectedCity = "Toronto";

    private string serverFilter = String.Empty;

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/Servers");
        }
    }

    private void selectCity(string cityName)
    {
        if (!String.IsNullOrEmpty(cityName))
        {
            this.selectedCity = cityName;

            this.servers = ServersRepository.GetServersByCity(this.selectedCity);
        }
    }

    private void HandleServerFilterChange(ChangeEventArgs args)
    {
        if (args.Value != null)
        {
            serverFilter = args.Value.ToString() ?? String.Empty;
            // this.servers = ServersRepository.GetServersByCityAndFilter(this.selectedCity, filter);
        }
    }

    private void HandleSearch()
    {
        this.servers = ServersRepository.SearchServers(serverFilter);
        this.selectedCity = string.Empty;
    }

}
