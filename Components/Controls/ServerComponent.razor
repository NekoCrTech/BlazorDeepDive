@inject NavigationManager NavigationManager

@if (Server!=null)
{

    <li @key="Server.Id" style="background-color: @GetBackgroundColor()">
        @Server.Name in @Server.City is
        <span style="color:@((Server.IsOnline ? "green" : "red"))">
            @(Server.IsOnline ? "online" : "offline")
        </span>
        &nbsp;
        @if (Server.IsOnline)
        {
            @RndInt(300) <text> / 300 </text>
            <button type="button"
                class="btn btn-outline-danger"
                @onclick="@(() => {Server.IsOnline = false; })">
                Turn Off
            </button>
        }
        else
        {
            <text>N / A </text>
            <button type="button" 
                class="btn btn-outline-success"
                @onclick="@(() =>  {Server.IsOnline = true; })">
                Turn On
            </button>
        }
        &nbsp;
        <a href="/servers/@Server.Id" class="btn btn-link">Edit</a>
        &nbsp;
        <EditForm Model="Server"
                  FormName="@($"form-Server-{Server.Id}")"
                  OnValidSubmit="@(() => {DeleteServer(Server.Id);})">
            <button type="submit" class="btn btn-primary">Delete</button>
        </EditForm>
    </li>
}



@code {
    [Parameter]
    public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string SelectedCity { get; set; }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/Servers", true);
        }
    }

    private string GetBackgroundColor()
    {
        if (SelectedCity != null)
        {
            switch (this.SelectedCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default:
                    return "white";
            }
        }
        return "white";
    }

    private int RndInt(int max)
    {
        Random random = new Random();
        int rndInt = random.Next(0, max+1);
        return rndInt;
    }
}