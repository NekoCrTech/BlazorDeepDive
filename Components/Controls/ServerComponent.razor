@using serverManagement2.StateStore
@inject NavigationManager NavigationManager
@inject TorontoOnlineServersStore TorontoOnlineServersStore

@if (Server!=null)
{
    <tr style="background-color: @GetBackgroundColor()">
        <td>
            @Server.Name
        </td>
        <td>
            @Server.City
        </td>
        <td style="color:@((Server.IsOnline ? "green" : "red"))">
            @(Server.IsOnline ? "online" : "offline")
        </td>
        <td>
            @if (Server.IsOnline)
            {
                @RndInt(300)<text>/300</text>
            }
            else
            {
                <text>N/A</text>
            }
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <button type="button"
                        class="btn btn-outline-danger"
                        @onclick="@(() => { SetServerStatus(false); })">
                    Turn Off
                </button>
            }
            else
            {
                <button type="button"
                        class="btn btn-outline-success"
                        @onclick="@(() => { SetServerStatus(true); })">
                    Turn On
                </button>
            }
            &nbsp;
            <a href="/server/@Server.Id" class="btn btn-link">Edit</a>
        </td>
        <td>
            <EditForm Model="Server"
                      FormName="@($"form-Server-{Server.Id}")"
                      OnValidSubmit="@(() => {DeleteServer(Server.Id);})">
                <button type="submit" class="btn btn-primary">Delete</button>
            </EditForm>
        </td>
    </tr>
}



@code {
    [Parameter]
    public Server? Server { get; set; }

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    private void DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersRepository.DeleteServer(serverId);
            NavigationManager.NavigateTo("/Servers", true);
        }
    }

    private void SetServerStatus(bool status)
    {
        if(this.Server is not null)
        {
            if (this.Server.IsOnline != status)
            {
                if (this.Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
                {
                    var num = TorontoOnlineServersStore.GetNumberServersOnline();
                    if (status)
                    {
                        TorontoOnlineServersStore.SetNumberServersOnline(num + 1);
                    }
                    else if (num > 1)
                    {
                        TorontoOnlineServersStore.SetNumberServersOnline(num - 1);
                    }
                }
                this.Server.IsOnline = status;
            }
        }
    }

    private string GetBackgroundColor()
    {
        if (SelectedCity != null)
        {
            switch (this.SelectedCity)
            {
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default:
                    return "white";
            }
        }
        return "white";
    }

    private int RndInt(int max)
    {
        Random random = new Random();
        int rndInt = random.Next(0, max+1);
        return rndInt;
    }
}